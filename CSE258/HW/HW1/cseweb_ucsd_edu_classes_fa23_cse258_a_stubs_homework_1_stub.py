# -*- coding: utf-8 -*-
"""cseweb.ucsd.edu_classes_fa23_cse258-a_stubs_Homework 1 stub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSNpe2s3qT35V0-uWfpG85VcIpXNGnTw
"""

import json
from collections import defaultdict
from sklearn import linear_model
import numpy as np
import random
import gzip
import dateutil.parser
import math

answers = {}


def assertFloat(x):
    assert type(float(x)) == float

def assertFloatList(items, N):
    assert len(items) == N
    assert [type(float(x)) for x in items] == [float]*N

### Question 1

f = gzip.open("fantasy_10000.json.gz")
dataset = []
for l in f:
    dataset.append(json.loads(l))

print(len(dataset))
sum = 0
for i in dataset:
    if 'review_text' in i.keys():
        sum = sum + 1
print(sum)


def feature(datum):
    """
    :param: datum : the whole dataset
    :return: a parsed feature only contains length of 'review_text'
             and one additional dimision of 1
    """

    parsed_data = []
    for i in datum:
        parsed_data.append([1, len(i['review_text'])])

    return parsed_data

X = feature(dataset)
Y = [i['rating'] for i in dataset]

X = np.array(X)
Y = np.array(Y)

print(X.shape)
print(Y.shape)

theta = np.matmul(np.linalg.inv(np.matmul(np.transpose(X), X)), np.transpose(X))
theta = np.matmul(theta, Y)
print(theta.shape)
print(theta)

from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(np.matmul(X, theta), Y)
print(MSE)

answers['Q1'] = [theta[0], theta[1], MSE]

assertFloatList(answers['Q1'], 3)

### Question 2

for d in dataset:
    t = dateutil.parser.parse(d['date_added'])
    d['parsed_date'] = t


def feature(datum):
    """
    :param: datum: parsed_dataset including the parsed date information
    :return: one hot encoding of week time and month time.
    """

    week_encoding = np.zeros(6)
    month_encoding = np.zeros(11)
    result = []
    for i in datum:
        week_number = i['parsed_date'].weekday()
        month_number = i['parsed_date'].month
        if month_number != 1:
            month_encoding[month_number - 2] = 1
        if week_number != 0:
            week_encoding[week_number - 1] = 1

        result.append(np.concatenate((np.array([1, len(i['review_text'])]),
                                      week_encoding,
                                      month_encoding)))

        if month_number != 1:
            month_encoding[month_number - 2] = 0
        if week_number != 0:
            week_encoding[week_number - 1] = 0

    return np.array(result)

X = feature(dataset)
Y = np.array([i['rating'] for i in dataset])
print(X.shape)
print(Y.shape)



answers['Q2'] = [X[0], X[1]]

assertFloatList(answers['Q2'][0], 19)
assertFloatList(answers['Q2'][1], 19)

### Question 3

def feature3(datum):
    """
    :param: datum: parsed_dataset including the parsed date information
    :return: easy encoding of week time and month time.
    """

    result = []
    for i in datum:
        week_number = i['parsed_date'].weekday()
        month_number = i['parsed_date'].month

        result.append(np.array([1, len(i['review_text']), week_number,
                                month_number]))


    return np.array(result)

X3 = feature3(dataset)
Y3 = np.array([i['rating'] for i in dataset])
print(X3.shape, Y3.shape)

theta2 = np.matmul(np.linalg.inv(np.matmul(np.transpose(X), X)), np.transpose(X))
theta2 = np.matmul(theta2, Y)
print(theta2.shape)
print(theta2)
theta3 = np.matmul(np.linalg.inv(np.matmul(np.transpose(X3), X3)), np.transpose(X3))
theta3 = np.matmul(theta3, Y3)
print(theta3.shape)
print(theta3)

mse2 = mean_squared_error(np.matmul(X, theta2), Y)
mse3 = mean_squared_error(np.matmul(X3, theta3), Y)
print(mse2)
print(mse3)

answers['Q3'] = [mse2, mse3]

assertFloatList(answers['Q3'], 2)

### Question 4

random.seed(0)
random.shuffle(dataset)

X2 = feature(dataset)
X3 = feature3(dataset)
Y = [d['rating'] for d in dataset]

train2, test2 = X2[:len(X2)//2], X2[len(X2)//2:]
train3, test3 = X3[:len(X3)//2], X3[len(X3)//2:]
trainY, testY = Y[:len(Y)//2], Y[len(Y)//2:]

train2 = np.array(train2)
train3 = np.array(train3)
test2 = np.array(test2)
test3 = np.array(test3)
trainY = np.array(trainY)
testY = np.array(testY)

theta2 = np.matmul(np.linalg.inv(np.matmul(np.transpose(train2), train2)), np.transpose(train2))
theta2 = np.matmul(theta2, trainY)
print(theta2.shape)
print(theta2)
theta3 = np.matmul(np.linalg.inv(np.matmul(np.transpose(train3), train3)), np.transpose(train3))
theta3 = np.matmul(theta3, trainY)
print(theta3.shape)
print(theta3)

test_mse2 = mean_squared_error(np.matmul(test2, theta2), testY)
test_mse3 = mean_squared_error(np.matmul(test3, theta3), testY)
print(test_mse2)
print(test_mse3)

answers['Q4'] = [test_mse2, test_mse3]

assertFloatList(answers['Q4'], 2)

### Question 5

f = open("beer_50000.json")
dataset = []
for l in f:
    dataset.append(eval(l))




